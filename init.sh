#!/bin/bash

# Initialize new node project.
echo "Initializing a new node project."
npm init -y || (echo "Error while initiating new node project." && exit 1)

# Initialize git.
echo "Initializing git."
git init || (echo "Error while initiating git." && exit 1)

# Install all the require dependencies.
echo "Installing dependencies."
npm install express dotenv cors && 
npm install --save-dev nodemon || 
(echo "Error while installing the required dependencies." && exit 1)

# Create all the required directories and files.
echo "Creating the required project structure."
mkdir -p src/routes/api &&
touch .env .gitignore src/app.js src/server.js src/routes/index.js src/routes/response.js src/routes/api/index.js ||
(echo "Error while creating the project structure." && exit 1)

echo "Adding content into the files."

cat <<EOL > .gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
EOL

echo "PORT=8080" >> .env

cat <<EOL > src/app.js
const express = require("express");
const cors = require("cors");

const app = express();

app.use(cors());
app.use(express.json());

app.use("/", require("./routes"));

module.exports = app;
EOL

cat <<EOL > src/server.js
const app = require("./app");
require("dotenv").config();

const PORT = process.env.PORT;

if (!PORT) {
  console.log("PORT number not provided.");
  process.exit(1);
}

app.listen(PORT, async () => {
  console.log(\`Server started on PORT: \${PORT}\`);
});
EOL

cat <<EOL > src/routes/response.js
// Standardize format for all the response.
module.exports = (success, message, data) => {
  return {
    ok: success,
    message: message,
    body: data,
  };
};
EOL

cat <<EOL > src/routes/index.js
const router = require("express").Router();
const response = require("./response");

router.use("/api", require("./api"));

// Healthcheck Route
router.get("/", async (req, res) => {
  console.log("Health Check!");

  // Get the current version of the project.
  const { version } = require("../../package.json");

  // Make sure that the response of health check route is not cached.
  res.setHeader("Cache-Control", "no-cache");

  res.status(200).json(
    response(true, "Healthy", {
      "Project Version": version,
    })
  );
});

// 404 Routes.
router.use((req, res) =>
  res.status(404).json(response(false, "Route does not exist."))
);

module.exports = router;
EOL

cat <<EOL > src/routes/api/index.js
const router = require("express").Router();
const response = require("../response");

router.get("/", async (req, res) => {
  res.status(200).json(response(true, "Example Route"));
});

module.exports = router;
EOL